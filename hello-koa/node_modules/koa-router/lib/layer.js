var debug = require('debug')('koa-router');
var pathToRegExp = require('path-to-regexp');

module.exports = Layer;

/**
 * Initialize a new routing Layer with given `method`, `path`, and `middleware`.
 *
 * @param {String|RegExp} path Path string or regular expression.
 * @param {Array} methods Array of HTTP verbs.
 * @param {Array} middleware Layer callback/middleware or series of.
 * @param {Object=} opts
 * @param {String=} opts.name route name
 * @param {String=} opts.sensitive case sensitive (default: false)
 * @param {String=} opts.strict require the trailing slash (default: false)
 * @returns {Layer}
 * @private
 */

function Layer(path, methods, middleware, opts) {
  this.opts = opts || {};
  this.name = this.opts.name || null;
  this.methods = [];
  this.paramNames = [];
  this.stack = Array.isArray(middleware) ? middleware : [middleware];

  methods.forEach(function(method) {
    var l = this.methods.push(method.toUpperCase());
    if (this.methods[l-1] === 'GET') {
      this.methods.unshift('HEAD');
    }
  }, this);

  // ensure middleware is a function
  this.stack.forEach(function(fn) {
    var type = (typeof fn);
    if (type !== 'function') {
      throw new Error(
        methods.toString() + " `" + (this.opts.name || path) +"`: `middleware` "
        + "must be a function, not `" + type + "`"
      );
    }
  }, this);

  this.path = path;
  this.regexp = pathToRegExp(path, this.paramNames, this.opts);

  debug('defined route %s %s', this.methods, this.opts.prefix + this.path);
};

/**
 * Returns whether request `path` matches route.
 *
 * @param {String} path
 * @returns {Boolean}
 * @private
 */

Layer.prototype.match = function (path) {
  return this.regexp.test(path);
};

/**
 * Returns map of URL parameters for given `path` and `paramNames`.
 *
 * @param {String} path
 * @param {Array.<string>} captures
 * @param {Object=} existingParams
 * @returns {Object}
 * @private
 */

Layer.prototype.params = function (path, captures, existingParams) {
  var params = existingParams || {};

  for (var len = captures.length, i=0; i<len; i++)="" {="" if="" (this.paramnames[i])="" var="" c="captures[i];" params[this.paramnames[i].name]="c" ?="" safedecodeuricomponent(c)="" :="" c;="" }="" return="" params;="" };="" **="" *="" returns="" array="" of="" regexp="" url="" path="" captures.="" @param="" {string}="" @returns="" {array.<string="">}
 * @private
 */

Layer.prototype.captures = function (path) {
  return path.match(this.regexp).slice(1);
};

/**
 * Generate URL for route using given `params`.
 *
 * @example
 *
 * <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* <span class="keyword">var</span> route = <span class="keyword">new</span> Layer([<span class="string">'GET'</span>], <span class="string">'/users/:id'</span>, fn);</div><div class="line">*</div><div class="line">* route.url(&#123; <span class="attr">id</span>: <span class="number">123</span> &#125;); <span class="comment">// =&gt; "/users/123"</span></div><div class="line">*</div></pre></td></tr></table></figure>

 *
 * @param {Object} params url parameters
 * @returns {String}
 * @private
 */

Layer.prototype.url = function (params) {
  var args = params;
  var url = this.path;
  var toPath = pathToRegExp.compile(url);

  // argument is of form { key: val }
  if (typeof params != 'object') {
    args = Array.prototype.slice.call(arguments);
  }

  if (args instanceof Array) {
    var tokens = pathToRegExp.parse(url);
    var replace = {};
    for (var len = tokens.length, i=0, j=0; i<len; i++)="" {="" if="" (tokens[i].name)="" replace[tokens[i].name]="args[j++];" }="" return="" topath(replace);="" else="" topath(params);="" };="" **="" *="" run="" validations="" on="" route="" named="" parameters.="" @example="" <figure="" class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">* router</div><div class="line">*   .param(<span class="string">'user'</span>, <span class="function"><span class="keyword">function</span> *(<span class="params">id, ctx, next</span>) </span>&#123;</div><div class="line">*     ctx.user = users[id];</div><div class="line">*     <span class="keyword">if</span> (!user) <span class="keyword">return</span> ctx.status = <span class="number">404</span>;</div><div class="line">*     next();</div><div class="line">*   &#125;)</div><div class="line">*   .get(<span class="string">'/users/:user'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</div><div class="line">*     ctx.body = ctx.user;</div><div class="line">*   &#125;);</div><div class="line">*</div></pre></td></tr></table>

 *
 * @param {String} param
 * @param {Function} middleware
 * @returns {Layer}
 * @private
 */

Layer.prototype.param = function (param, fn) {
  var stack = this.stack;
  var params = this.paramNames;
  var middleware = function (ctx, next) {
    return fn.call(this, ctx.params[param], ctx, next);
  };
  middleware.param = param;

  params.forEach(function (p, i) {
    var prev = params[i - 1];

    if (param === p.name) {
      // insert param middleware in order params appear in path
      if (prev) {
        if (!stack.some(function (m, i) {
          if (m.param === prev.name) {
            return stack.splice(i, 0, middleware);
          }
        })) {
          stack.some(function (m, i) {
            if (!m.param) {
              return stack.splice(i, 0, middleware);
            }
          });
        }
      } else {
        stack.unshift(middleware);
      }
    }
  });

  return this;
};

/**
 * Prefix route path.
 *
 * @param {String} prefix
 * @returns {Layer}
 * @private
 */

Layer.prototype.setPrefix = function (prefix) {
  if (this.path) {
    this.path = prefix + this.path;
    this.paramNames = [];
    this.regexp = pathToRegExp(this.path, this.paramNames, this.opts);
  }

  return this;
};

/**
 * Safe decodeURIComponent, won't throw any error.
 * If `decodeURIComponent` error happen, just return the original value.
 *
 * @param {String} text
 * @returns {String} URL decode original string.
 * @private
 */

function safeDecodeURIComponent(text) {
  try {
    return decodeURIComponent(text);
  } catch (e) {
    return text;
  }
}
</len;></len;></string>